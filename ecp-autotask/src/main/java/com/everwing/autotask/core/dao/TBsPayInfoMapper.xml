<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.everwing.autotask.core.dao.TBsPayInfoMapper">
  <resultMap id="BaseResultMap" type="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="project_id" jdbcType="VARCHAR" property="projectId" />
    <result column="building_code" jdbcType="VARCHAR" property="buildingCode" />
    <result column="building_full_name" jdbcType="VARCHAR" property="buildingFullName" />
	  <result column="building_type" jdbcType="VARCHAR" property="buildingType" />
    <result column="pay_type" jdbcType="TINYINT" property="payType" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="batch_no" jdbcType="VARCHAR" property="batchNo"/>
    <result column="asset_no" jdbcType="VARCHAR" property="assetNo" />
    <result column="cust_name" jdbcType="VARCHAR" property="custName" />
    <result column="wy_amount" jdbcType="DOUBLE" property="wyAmount" />
    <result column="bt_amount" jdbcType="DOUBLE" property="btAmount" />
    <result column="water_amount" jdbcType="DOUBLE" property="waterAmount" />
    <result column="elect_amount" jdbcType="DOUBLE" property="electAmount" />
    <result column="common_amount" jdbcType="DOUBLE" property="commonAmount" />
    <result column="jm_amount" jdbcType="DOUBLE" property="jmAmount" />
    <result column="jm_remark" jdbcType="VARCHAR" property="jmRemark" />
    <result column="wy_tax" jdbcType="DOUBLE" property="wyTax" />
    <result column="bt_tax" jdbcType="DOUBLE" property="btTax" />
	  <result column="wxXiao" jdbcType="DOUBLE" property="wxXiao" />
    <result column="water_tax" jdbcType="DOUBLE" property="waterTax" />
    <result column="elect_tax" jdbcType="DOUBLE" property="electTax" />
    <result column="pay_cash" jdbcType="DOUBLE" property="payCash" />
    <result column="pay_wx" jdbcType="DOUBLE" property="payWx" />
    <result column="pay_union" jdbcType="DOUBLE" property="payUnion" />
    <result column="pay_zfb" jdbcType="DOUBLE" property="payZfb" />
    <result column="pay_coll" jdbcType="DOUBLE" property="payColl" />
    <result column="pay_bank" jdbcType="DOUBLE" property="payBank" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_id" jdbcType="VARCHAR" property="createId" />
    <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    <result column="modify_id" jdbcType="VARCHAR" property="modifyId" />
    <result column="payer_name" jdbcType="VARCHAR" property="payerName" />
    <result column="total_late_fee" jdbcType="DOUBLE" property="totalLateFee" />
    <result column="is_give_invoice" jdbcType="TINYINT" property="isGiveInvoice" />
    <result column="relation_id" jdbcType="VARCHAR" property="relationId" />
    <result column="wy_late_fee" jdbcType="DOUBLE" property="wyLateFee" />
    <result column="bt_late_fee" jdbcType="DOUBLE" property="btLateFee" />
    <result column="water_late_fee" jdbcType="DOUBLE" property="waterLateFee" />
    <result column="elect_late_fee" jdbcType="DOUBLE" property="electLateFee" />
  </resultMap>
  
  <resultMap id="hasAnnexRsltMap" type="TBsPayInfo" extends="BaseResultMap">
  		<collection property="annexs" select="com.everwing.coreservice.wy.dao.mapper.annex.AnnexMapper.getAnnexbyRelationId" ofType="Annex" column="id"/>
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    id, project_id, building_code, building_full_name, pay_type, status, asset_no, cust_name, wy_amount, 
    bt_amount, water_amount, elect_amount, common_amount, jm_amount, jm_remark, wy_tax, bt_tax, water_tax, elect_tax,
    pay_cash,pay_wx,pay_union,pay_zfb,pay_coll,pay_bank,
    create_time,create_id, modify_time, modify_id,payer_name,is_give_invoice,batch_no,relation_id,wy_late_fee,bt_late_fee,water_late_fee,elect_late_fee
  </sql>
  
  <sql id="search_sql">
	  	SELECT t4.*,
				   <if test='"person" ==  custType '>
					   GROUP_CONCAT(t5.name) AS cust_name
				   </if>
				   <if test='"enterprise" == custType'>
					   GROUP_CONCAT(t5.enterprise_name) AS cust_name
				   </if>
			FROM (
					SELECT 
						SUM(CASE t.type WHEN 0 THEN t.account_balance ELSE 0 END) AS common_amount,   
						SUM(CASE t.type WHEN 1 THEN t.account_balance ELSE 0 END) AS wy_amount, 
						SUM(CASE t.type WHEN 2 THEN t.account_balance ELSE 0 END) AS bt_amount, 
						SUM(CASE t.type WHEN 3 THEN t.account_balance ELSE 0 END) AS water_amount, 
						SUM(CASE t.type WHEN 4 THEN t.account_balance ELSE 0 END) AS elect_amount,
						SUM(CASE t.type WHEN 1 THEN t.late_fee ELSE 0 END) AS wy_late_fee,
						SUM(CASE t.type WHEN 2 THEN t.late_fee ELSE 0 END) AS bt_late_fee,
						SUM(CASE t.type WHEN 3 THEN t.late_fee ELSE 0 END) AS water_late_fee,
						SUM(CASE t.type WHEN 4 THEN t.late_fee ELSE 0 END) AS elect_late_fee,
						t.building_code,
						t.building_full_name,
						t.project_id
					FROM  
				(
					SELECT tt1.*,SUM(tt2.total_late_fee) AS late_fee 
					FROM 
					(
						SELECT t1.building_code, 
						       t1.`type`, 
						       t1.account_balance, 
						       t1.full_name AS building_full_name,
						       t1.id,
						       t1.project_id
						FROM t_bs_asset_account t1, tc_building t2,tc_person_building t3
						WHERE 1 = 1
						<if test="null != buildingCodes">
							AND t1.building_code IN 
							<foreach collection="buildingCodes" open="(" separator="," close=")" item="code">
								#{code}
							</foreach>
						</if>
						AND t1.building_code = t2.building_code
						AND t2.building_code = t3.building_code
						<if test='"person" ==  custType '>
							AND t3.cust_id = #{custId}
						</if>		
						<if test='"enterprise" == custType'>
							and t3.enterprise_id = #{custId}			
						</if>
						AND t1.use_status = 0 
						<if test="null != createId">
							AND t2.project_id in (SELECT project_id FROM t_jg_staff_grop WHERE user_id = #{createId} and role_level in (3,4) GROUP BY project_id)
						</if>
					) tt1
					LEFT JOIN t_bs_owed_history tt2 ON tt1.id = tt2.account_id AND tt2.is_used = 0
					GROUP BY tt1.building_code,tt1.type ASC
					
				) t
				GROUP BY t.building_code
			) t4,
			<if test='"person" ==  custType '>
				tc_person_cust t5,
		    </if>
		    <if test='"enterprise" == custType'>
				tc_enterprise_cust t5,
		    </if>
			tc_person_building t6
			WHERE 1 = 1
			<if test='"person" ==  custType '>
				and t5.cust_id = t6.cust_id
				and t5.cust_id = #{custId}
				and t6.cust_id is not null
			</if>
			<if test='"enterprise" == custType'>
				and t5.enterprise_id = t6.enterprise_id
				and t5.enterprise_id = #{custId}
				and t6.enterprise_id is not null
			</if>
			AND t4.building_code = t6.building_code
			GROUP BY t4.building_code
  </sql>
  
  <sql id="search_sql_4_building">
	SELECT t1.*,
	       group_concat(t2.name) AS cust_name
	FROM 
	(
		SELECT
			SUM(CASE t.type WHEN 0 THEN t.account_balance ELSE 0 END) AS common_amount,
			SUM(CASE t.type WHEN 1 THEN t.account_balance ELSE 0 END) AS wy_amount,
			SUM(CASE t.type WHEN 2 THEN t.account_balance ELSE 0 END) AS bt_amount,
			SUM(CASE t.type WHEN 3 THEN t.account_balance ELSE 0 END) AS water_amount,
			SUM(CASE t.type WHEN 4 THEN t.account_balance ELSE 0 END) AS elect_amount,
			SUM(CASE t.type WHEN 1 THEN t.late_fee ELSE 0 END) AS wy_late_fee,
			SUM(CASE t.type WHEN 2 THEN t.late_fee ELSE 0 END) AS bt_late_fee,
			SUM(CASE t.type WHEN 3 THEN t.late_fee ELSE 0 END) AS water_late_fee,
			SUM(CASE t.type WHEN 4 THEN t.late_fee ELSE 0 END) AS elect_late_fee,
			t.building_code,
			t.building_full_name,
			t.project_id
		FROM (
			SELECT
			    t1.building_code,
			    t1.`type`,
			    t1.account_balance,
			    t1.full_name AS building_full_name,
			    SUM(t3.total_late_fee) AS late_fee,
			    t1.project_id
			  FROM t_bs_asset_account t1
			  left join tc_building t2 ON t1.building_code = t2.building_code
			  left join t_bs_owed_history t3 on t1.id = t3.account_id and t3.is_used = 0
			  WHERE 1 = 1
			      AND t1.building_code = #{buildingCode}
			      AND t1.use_status = 0
			      <if test="null != createId">
			      	AND t2.project_id in (SELECT project_id FROM t_jg_staff_grop WHERE user_id = #{createId} and role_level in (3,4) GROUP BY project_id)
			      </if>
			  GROUP BY t2.building_code,t1.type ASC
			  ) t
		GROUP BY t.building_code
	) t1
	LEFT JOIN 
	(
			SELECT t3.name AS `name`, t4.building_code 
			  FROM tc_person_cust t3 , tc_person_building t4 
			 WHERE t3.cust_id = t4.cust_id 
			   AND t4.enterprise_id IS NULL 
			   AND t4.building_code = #{buildingCode}
	  UNION ALL
			SELECT t5.enterprise_name AS `name`, t6.building_code 
			  FROM tc_enterprise_cust t5, tc_person_building t6 
			 WHERE t5.enterprise_id = t6.enterprise_id 
			   AND t6.cust_id IS NULL 
			   AND t6.building_code = #{buildingCode}
	) t2
	ON t1.building_code = t2.building_code
  </sql>

	<sql id="search_sql_4_buildingNew">
		SELECT t1.*,
		group_concat(t2.name) AS cust_name
		FROM
		(
		SELECT

	<!--	SUM(CASE t.account_type WHEN 0 THEN t.last_bill_fee ELSE 0 END) AS common_amount,-->
		SUM(CASE t.account_type WHEN 1 THEN t.last_bill_fee ELSE 0 END) AS wy_amount,
		SUM(CASE t.account_type WHEN 2 THEN t.last_bill_fee ELSE 0 END) AS bt_amount,
		SUM(CASE t.account_type WHEN 3 THEN t.last_bill_fee ELSE 0 END) AS water_amount,
		SUM(CASE t.account_type WHEN 4 THEN t.last_bill_fee ELSE 0 END) AS elect_amount,
		SUM(CASE t.account_type WHEN 1 THEN t.late_fee ELSE 0 END) AS wy_late_fee,
		SUM(CASE t.account_type WHEN 2 THEN t.late_fee ELSE 0 END) AS bt_late_fee,
		SUM(CASE t.account_type WHEN 3 THEN t.late_fee ELSE 0 END) AS water_late_fee,
		SUM(CASE t.account_type WHEN 4 THEN t.late_fee ELSE 0 END) AS elect_late_fee,
		t.house_code,
		t.building_code,
		t.building_full_name,
		t.project_id,
		t.house_code_new,
		t.common_deposit_amount as common_amount
		FROM (
		SELECT
		t2.house_code,
		t2.building_code,
		t1.account_type,
		t1.last_bill_fee,
		t2.building_full_name AS building_full_name,
		t1.house_code_new,
		SUM(t3.amount) AS late_fee,
		t4.common_deposit_amount,
		t1.project_id
		FROM t_ac_last_bill_fee_info t1
		left join tc_building t2 ON t1.house_code_new = t2.house_code
		left join t_ac_delay_account t3 on t1.house_code_new = t3.house_code_new
		left join t_ac_account t4 on t1.house_code_new=t4.house_code_new
		WHERE 1 = 1
		AND t1.house_code_new = #{buildingCode}
		and t1.account_type=t3.account_type
		<if test="null != createId">
			AND t2.project_id in (SELECT project_id FROM t_jg_staff_grop WHERE user_id = #{createId} and role_level in (3,4) GROUP BY project_id)
		</if>
		GROUP BY t2.house_code,t1.account_type ASC
		) t
		GROUP BY t.house_code
		) t1
		LEFT JOIN
		(
		SELECT t3.name AS `name`, t5.house_code
		FROM tc_person_cust t3 , tc_person_building t4,tc_building t5
		WHERE t3.cust_id = t4.cust_id
		AND t4.enterprise_id IS NULL
		AND t4.building_code = (select building_code from tc_building  where house_code = #{buildingCode})
		and t4.building_code = t5.building_code
		UNION ALL
		SELECT t5.enterprise_name AS `name`, t6.building_code
		FROM tc_enterprise_cust t5, tc_person_building t6
		WHERE t5.enterprise_id = t6.enterprise_id
		AND t6.cust_id IS NULL
		AND t6.building_code = (select building_code from tc_building  where house_code = #{buildingCode})
		) t2
		ON t1.house_code_new = t2.house_code
	</sql>
  
  <select id="listPage" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		<include refid="search_sql"/>
  </select>
  
  <select id="listPage4Building" parameterType="TBsPayInfo" resultMap="BaseResultMap">
  		<include refid="search_sql_4_building"/>
  </select>
  
  <select id="findSumByObjCurrent" parameterType="TBsPayInfo" resultMap="BaseResultMap">
  	select tt.cust_name, 
  		   sum(tt.common_amount) as common_amount,
  		   sum(tt.wy_amount) as wy_amount,
  		   sum(tt.bt_amount) as bt_amount,
  		   sum(tt.water_amount) as water_amount,
  		   sum(tt.elect_amount) as elect_amount,
  		   SUM(tt.wy_late_fee) AS wy_late_fee,
  		   SUM(tt.bt_late_fee) AS bt_late_fee,
  		   SUM(tt.water_late_fee) AS water_late_fee,
  		   SUM(tt.elect_late_fee) AS elect_late_fee
  	  from (
  			<include refid="search_sql"/>
  		   ) tt
  </select>
  
  <select id="findSumByObjCurrent4Building"  parameterType="TBsPayInfo" resultMap="BaseResultMap">
  	select tt.cust_name, 
  		   sum(tt.common_amount) as common_amount,
  		   sum(tt.wy_amount) as wy_amount,
  		   sum(tt.bt_amount) as bt_amount,
  		   sum(tt.water_amount) as water_amount,
  		   sum(tt.elect_amount) as elect_amount,
  		   SUM(tt.wy_late_fee) AS wy_late_fee,
  		   SUM(tt.bt_late_fee) AS bt_late_fee,
  		   SUM(tt.water_late_fee) AS water_late_fee,
  		   SUM(tt.elect_late_fee) AS elect_late_fee,
  		   tt.building_code
  	  from (
  			<include refid="search_sql_4_building"/>
  		   ) tt
  </select>

	<select id="findSumByObjCurrent4BuildingNew"  parameterType="TBsPayInfo" resultMap="BaseResultMap">
		select tt.cust_name,
		sum(tt.common_amount) as common_amount,
		sum(tt.wy_amount) as wy_amount,
		sum(tt.bt_amount) as bt_amount,
		sum(tt.water_amount) as water_amount,
		sum(tt.elect_amount) as elect_amount,
		SUM(tt.wy_late_fee) AS wy_late_fee,
		SUM(tt.bt_late_fee) AS bt_late_fee,
		SUM(tt.water_late_fee) AS water_late_fee,
		SUM(tt.elect_late_fee) AS elect_late_fee,
		tt.house_code,
		tt.building_code
		from (
		<include refid="search_sql_4_buildingNew"/>
		) tt
	</select>
  
  
  <select id="selectByExample" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfoExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from t_bs_pay_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
      <if test="limitStart >= 0">
        limit ${limitStart} , ${limitEnd}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    select 
    <include refid="Base_Column_List" />
    from t_bs_pay_info
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    delete from t_bs_pay_info
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfoExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    delete from t_bs_pay_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="batchInsert" parameterType="TBsPayInfo">
  	   insert into t_bs_pay_info
  	   (
  	   		id, 
  	   		project_id, 
  	   		building_code, 
      		pay_type,
      		status,
      		building_full_name, 
      		asset_no, cust_name, 
      		wy_amount, 
      		bt_amount, 
      		water_amount, 
      		elect_amount, 
      		common_amount, 
      		jm_amount, 
      		jm_remark, 
      		wy_tax,
      		bt_tax,
      		water_tax,
      		elect_tax,
      		pay_cash,
      		pay_wx,
      		pay_union,
      		pay_zfb,
      		pay_coll,
      		pay_bank,
      		create_time, 
      		create_id, 
      		modify_time, 
      		modify_id,
      		payer_name,
      		is_give_invoice,
      		batch_no,
      		relation_id,
      		wy_late_fee,
      		bt_late_fee,
      		water_late_fee,
      		elect_late_fee
  	   )
  	   values
  	   <foreach collection="list" item="info" open="" close="" separator=",">
  	   (
			 #{info.id,jdbcType=VARCHAR}, 
			 #{info.projectId,jdbcType=VARCHAR}, 
			 #{info.buildingCode,jdbcType=VARCHAR}, 
			 #{info.payType,jdbcType=TINYINT},
			 #{info.status,jdbcType=TINYINT},
      		 ifnull((select building_full_name from tc_building where building_code = #{info.buildingCode} order by create_time desc limit 0,1),""),
      		 #{info.buildingCode,jdbcType=VARCHAR}, 
      		 #{info.custName,jdbcType=VARCHAR}, 
      		 ifnull(#{info.wyAmount,jdbcType=DOUBLE},0), 
      		 ifnull(#{info.btAmount,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.waterAmount,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.electAmount,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.commonAmount,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.jmAmount,jdbcType=DOUBLE}, 0),
      		 #{info.jmRemark,jdbcType=VARCHAR}, 
      		 ifnull(#{info.wyTax,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.btTax,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.waterTax,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.electTax,jdbcType=DOUBLE},0),
      		 ifnull(#{info.payCash,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.payWx,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.payUnion,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.payZfb,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.payColl,jdbcType=DOUBLE}, 0),
      		 ifnull(#{info.payBank,jdbcType=DOUBLE}, 0),
      		 sysdate(),
      		 #{info.createId,jdbcType=VARCHAR}, 
      		 sysdate(),
      		 #{info.modifyId,jdbcType=VARCHAR},
      		 #{info.payerName,jdbcType=VARCHAR},
      		 #{info.isGiveInvoice,jdbcType=TINYINT},
      		 #{info.batchNo,jdbcType=VARCHAR},
      		 #{info.relationId,jdbcType=VARCHAR},
      		 #{info.wyLateFee,jdbcType=DOUBLE},	   
      		 #{info.btLateFee,jdbcType=DOUBLE},	   
      		 #{info.waterLateFee,jdbcType=DOUBLE},	   
      		 #{info.electLateFee,jdbcType=DOUBLE}	   
  	   )
  	   </foreach>
  </insert>
  
  <insert id="insert" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    insert into t_bs_pay_info (id, project_id, building_code, 
      building_full_name, pay_type, status, asset_no, cust_name, 
      wy_amount, bt_amount, water_amount, 
      elect_amount, common_amount, jm_amount, 
      jm_remark, wy_tax,bt_tax,water_tax,elect_tax,pay_cash,pay_wx,pay_union,pay_zfb,pay_coll,pay_bank,
      create_time, create_id,modify_time, modify_id,payer_name,is_give_invoice,batch_no,relation_id,
      wy_late_fee,bt_late_fee,water_late_fee,elect_late_fee)
    values (#{id,jdbcType=VARCHAR}, 
    		#{projectId,jdbcType=VARCHAR}, 
    		#{buildingCode,jdbcType=VARCHAR}, 
      		#{buildingFullName,jdbcType=VARCHAR},
      		#{payType,jdbcType=TINYINT},
      		#{status,jdbcType=TINYINT}, 
      		#{buildingCode,jdbcType=VARCHAR}, 
      		#{custName,jdbcType=VARCHAR}, 
      		ifnull(#{wyAmount,jdbcType=DOUBLE}, 0),
      		ifnull(#{btAmount,jdbcType=DOUBLE},  0),
      		ifnull(#{waterAmount,jdbcType=DOUBLE}, 0),
      		ifnull(#{electAmount,jdbcType=DOUBLE}, 0),
      		ifnull(#{commonAmount,jdbcType=DOUBLE}, 0), 
      		ifnull(#{jmAmount,jdbcType=DOUBLE}, 0),
      		#{jmRemark,jdbcType=VARCHAR},  
      		ifnull(#{wyTax,jdbcType=DOUBLE}, 0), 
      		ifnull(#{btTax,jdbcType=DOUBLE}, 0), 
      		ifnull(#{waterTax,jdbcType=DOUBLE}, 0),
      		ifnull(#{electTax,jdbcType=DOUBLE}, 0),
      		ifnull(#{payCash,jdbcType=DOUBLE}, 0), 
      		ifnull(#{payWx,jdbcType=DOUBLE}, 0), 
      		ifnull(#{payUnion,jdbcType=DOUBLE}, 0), 
      		ifnull(#{payZfb,jdbcType=DOUBLE}, 0), 
      		ifnull(#{payColl,jdbcType=DOUBLE}, 0), 
      		ifnull(#{payBank,jdbcType=DOUBLE}, 0), 
      		sysdate(), 
      		#{createId,jdbcType=VARCHAR}, 
      		sysdate(), 
      		#{modifyId,jdbcType=VARCHAR},
      		#{payerName,jdbcType=VARCHAR},
      		#{isGiveInvoice,jdbcType=TINYINT},
      		#{batchNo},
      		#{relationId,jdbcType=VARCHAR},
      		#{wyLateFee,jdbcType=DOUBLE},	   
      		#{btLateFee,jdbcType=DOUBLE},	   
      		#{waterLateFee,jdbcType=DOUBLE},	   
      		#{electLateFee,jdbcType=DOUBLE}	 
      )
  </insert>
  <insert id="insertSelective" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    insert into t_bs_pay_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="buildingCode != null">
        building_code,
      </if>
      <if test="buildingFullName != null">
        building_full_name,
      </if>
      <if test="payType != null">
      	pay_type,
      </if>
      <if test="status != null">
      	status,
      </if>
      <if test="assetNo != null">
        asset_no,
      </if>
      <if test="custName != null">
        cust_name,
      </if>
      <if test="wyAmount != null">
        wy_amount,
      </if>
      <if test="btAmount != null">
        bt_amount,
      </if>
      <if test="waterAmount != null">
        water_amount,
      </if>
      <if test="electAmount != null">
        elect_amount,
      </if>
      <if test="commonAmount != null">
        common_amount,
      </if>
      <if test="jmAmount != null">
        jm_amount,
      </if>
      <if test="jmRemark != null">
        jm_remark,
      </if>
      <if test="wyTax != null">
        wy_tax,
      </if>
      <if test="btTax != null">
        bt_tax,
      </if>
      <if test="waterTax != null">
        water_tax,
      </if>
      <if test="electTax != null">
        elect_tax,
      </if>
      <if test="pay_cash != null">
        pay_cash,
      </if>
      <if test="pay_wx != null">
        pay_wx,
      </if>
      <if test="pay_union != null">
        pay_union,
      </if>
      <if test="pay_zfb != null">
        pay_zfb,
      </if>
      <if test="pay_coll != null">
        pay_coll,
      </if>
      <if test="pay_bank != null">
        pay_bank,
      </if>
        create_time,
      <if test="createId != null">
        create_id,
      </if>
        modify_time,
      <if test="modifyId != null">
        modify_id,
      </if>
      <if test="null != payerName">
      	payer_name,
      </if>
      <if test="null != isGiveInvoice">
      	is_give_invoice,
      </if>
      <if test="null != relationId">
      	relation_id,
      </if>
      <if test="null != wyLateFee">
      	wy_late_fee,
      </if>
      <if test="null != btLateFee">
      	bt_late_fee,
      </if>
      <if test="null != waterLateFee">
      	water_late_fee,
      </if>
      <if test="null != electLateFee">
      	elect_late_fee,
      </if>
      batch_no
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=VARCHAR},
      </if>
      <if test="buildingCode != null">
        #{buildingCode,jdbcType=VARCHAR},
      </if>
      <if test="buildingFullName != null">
        #{buildingFullName,jdbcType=VARCHAR},
      </if>
      <if test="null != payType">
      	#{payType,jdbcType=TINYINT}
      </if>
      <if test="null != status">
      	#{status,jdbcType=TINYINT}
      </if>
      <if test="assetNo != null">
        #{assetNo,jdbcType=VARCHAR},
      </if>
      <if test="custName != null">
        #{custName,jdbcType=VARCHAR},
      </if>
      <if test="wyAmount != null">
        #{wyAmount,jdbcType=DOUBLE},
      </if>
      <if test="btAmount != null">
        #{btAmount,jdbcType=DOUBLE},
      </if>
      <if test="waterAmount != null">
        #{waterAmount,jdbcType=DOUBLE},
      </if>
      <if test="electAmount != null">
        #{electAmount,jdbcType=DOUBLE},
      </if>
      <if test="commonAmount != null">
        #{commonAmount,jdbcType=DOUBLE},
      </if>
      <if test="jmAmount != null">
        #{jmAmount,jdbcType=DOUBLE},
      </if>
      <if test="jmRemark != null">
        #{jmRemark,jdbcType=VARCHAR},
      </if>
      <if test="wyTax != null">
        #{wyTax,jdbcType=DOUBLE},
      </if>
      <if test="btTax != null">
        #{btTax,jdbcType=DOUBLE},
      </if>
      <if test="waterTax != null">
        #{waterTax,jdbcType=DOUBLE},
      </if>
      <if test="electTax != null">
        #{electTax,jdbcType=DOUBLE},
      </if>
      <if test="payCash != null">
        payCash,
      </if>
      <if test="payWx != null">
        payWx,
      </if>
      <if test="payUnion != null">
        payUnion,
      </if>
      <if test="payZfb != null">
        payZfb,
      </if>
      <if test="payColl != null">
        payColl,
      </if>
      <if test="payBank != null">
        payBank,
      </if>
      sysdate(),
      <if test="createId != null">
        #{createId,jdbcType=VARCHAR},
      </if>
	  sysdate(),
      <if test="modifyId != null">
        #{modifyId,jdbcType=VARCHAR},
      </if>
      <if test="null != payerName">
      	#{payerName,jdbcType=VARCHAR},
      </if>
      <if test="null != isGiveInvoice">
      	#{isGiveInvoice,jdbcType=TINYINT},
      </if>
      <if test="null != relationId">
      	#{relationId,jdbcType=TINYINT},
      </if>
       <if test="null != wyLateFee">
      	#{wyLateFee,jdbcType=DOUBLE},
      </if>
      <if test="null != btLateFee">
      	#{btLateFee,jdbcType=DOUBLE},
      </if>
      <if test="null != waterLateFee">
      	#{waterLateFee,jdbcType=DOUBLE},
      </if>
      <if test="null != electLateFee">
      	#{electLateFee,jdbcType=DOUBLE},
      </if>
      (SELECT CONCAT(DATE_FORMAT(SYSDATE(),'%Y%m%d'),LPAD((SELECT COUNT(0) FROM t_bs_pay_info t WHERE DATE_FORMAT(create_time,'%Y-%m-%d') = CURDATE())+1,5,'0')))
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfoExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    select count(*) from t_bs_pay_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    update t_bs_pay_info
    <set>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=VARCHAR},
      </if>
      <if test="buildingCode != null">
        building_code = #{buildingCode,jdbcType=VARCHAR},
      </if>
      <if test="buildingFullName != null">
        building_full_name = #{buildingFullName,jdbcType=VARCHAR},
      </if>
      <if test="null != payType">
      	pay_type = #{payType,jdbcType=TINYINT},
      </if>
      <if test="null != status">
      	status = #{status,jdbcType=TINYINT},
      </if>
      <if test="assetNo != null">
        asset_no = #{assetNo,jdbcType=VARCHAR},
      </if>
      <if test="custName != null">
        cust_name = #{custName,jdbcType=VARCHAR},
      </if>
      <if test="wyAmount != null">
        wy_amount = #{wyAmount,jdbcType=DOUBLE},
      </if>
      <if test="btAmount != null">
        bt_amount = #{btAmount,jdbcType=DOUBLE},
      </if>
      <if test="waterAmount != null">
        water_amount = #{waterAmount,jdbcType=DOUBLE},
      </if>
      <if test="electAmount != null">
        elect_amount = #{electAmount,jdbcType=DOUBLE},
      </if>
      <if test="commonAmount != null">
        common_amount = #{commonAmount,jdbcType=DOUBLE},
      </if>
      <if test="jmAmount != null">
        jm_amount = #{jmAmount,jdbcType=DOUBLE},
      </if>
      <if test="jmRemark != null">
        jm_remark = #{jmRemark,jdbcType=VARCHAR},
      </if>
      <if test="wyTax != null">
        wy_tax = #{wyTax,jdbcType=DOUBLE},
      </if>
      <if test="btTax != null">
        bt_tax = #{btTax,jdbcType=DOUBLE},
      </if>
      <if test="waterTax != null">
        water_tax = #{waterTax,jdbcType=DOUBLE},
      </if>
      <if test="electTax != null">
        elect_tax = #{electTax,jdbcType=DOUBLE},
      </if>
      <if test="payCash != null">
        pay_cash = #{payCash,jdbcType=DOUBLE},
      </if>
      <if test="payWx != null">
        pay_wx = #{payWx,jdbcType=DOUBLE},
      </if>
      <if test="payUnion != null">
        pay_union = #{payUnion,jdbcType=DOUBLE},
      </if>
      <if test="payZfb != null">
        pay_zfb = #{payZfb,jdbcType=DOUBLE},
      </if>
      <if test="payColl != null">
        pay_coll = #{payColl,jdbcType=DOUBLE},
      </if>
      <if test="payBank != null">
        pay_bank = #{payBank,jdbcType=DOUBLE},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createId != null">
        create_id = #{createId,jdbcType=VARCHAR},
      </if>
        modify_time = sysdate(),
      <if test="modifyId != null">
        modify_id = #{modifyId,jdbcType=VARCHAR},
      </if>
      <if test="null != payerName">
      	payer_name = #{payerName,jdbcType=VARCHAR},
      </if>
      <if test="null != isGiveInvoice">
      	is_give_invoice = #{isGiveInvoice,jdbcType=TINYINT},
      </if>
      <if test="null != relationId">
      	relation_id = #{relationId,jdbcType=VARCHAR},
      </if>
       <if test="null != wyLateFee">
      	wy_late_fee = #{wyLateFee,jdbcType=DOUBLE},
      </if>
      <if test="null != btLateFee">
      	bt_late_fee = #{btLateFee,jdbcType=DOUBLE},
      </if>
      <if test="null != waterLateFee">
      	water_late_fee = #{waterLateFee,jdbcType=DOUBLE},
      </if>
      <if test="null != electLateFee">
      	elect_late_fee = #{electLateFee,jdbcType=DOUBLE},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 24 16:25:32 CST 2017.
    -->
    update t_bs_pay_info
    set project_id = #{projectId,jdbcType=VARCHAR},
      building_code = #{buildingCode,jdbcType=VARCHAR},
      building_full_name = #{buildingFullName,jdbcType=VARCHAR},
      pay_type = #{payType,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      asset_no = #{assetNo,jdbcType=VARCHAR},
      cust_name = #{custName,jdbcType=VARCHAR},
      wy_amount = #{wyAmount,jdbcType=DOUBLE},
      bt_amount = #{btAmount,jdbcType=DOUBLE},
      water_amount = #{waterAmount,jdbcType=DOUBLE},
      elect_amount = #{electAmount,jdbcType=DOUBLE},
      common_amount = #{commonAmount,jdbcType=DOUBLE},
      jm_amount = #{jmAmount,jdbcType=DOUBLE},
      jm_remark = #{jmRemark,jdbcType=VARCHAR},
      wy_tax = #{wyTax,jdbcType=DOUBLE},
      bt_tax = #{btTax,jdbcType=DOUBLE},
      water_tax = #{waterTax,jdbcType=DOUBLE},
      elect_tax = #{electTax,jdbcType=DOUBLE},
      pay_cash = #{payCash,jdbcType=DOUBLE},
      pay_wx = #{payWx,jdbcType=DOUBLE},
      pay_union = #{payUnion,jdbcType=DOUBLE},
      pay_zfb = #{payZfb,jdbcType=DOUBLE},
      pay_bank = #{payBank,jdbcType=DOUBLE},
      pay_coll = #{payColl,jdbcType=DOUBLE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_id = #{createId,jdbcType=VARCHAR},
      modify_time = sysdate(),
      modify_id = #{modifyId,jdbcType=VARCHAR},
      payer_name = #{payerName,jdbcType=VARCHAR},
      is_give_invoice = #{isGiveInvoice,jdbcType=TINYINT},
      relation_id = #{relationId,jdbcType=VARCHAR},
      wy_late_fee = #{wyLateFee,jdbcType=DOUBLE},
      bt_late_fee = #{btLateFee,jdbcType=DOUBLE},
      water_late_fee = #{waterLateFee,jdbcType=DOUBLE},
      elect_late_fee = #{electLateFee,jdbcType=DOUBLE}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <select id="listPageHistory" parameterType="TBsPayInfo" resultMap="BaseResultMap">
  	select * from t_bs_pay_info 
  	where 1 = 1
  	<if test="null != buildingCode">
  		and building_code = #{buildingCode}
  	</if>
  	<if test="null != batchNo">
     	and batch_no like CONCAT('%',#{batchNo},'%')
     </if>
     <if test="null != status">
     	and status = #{status}
     </if>
  	order by create_time desc
  </select>
  
  <!-- 为财务推送业主交费，查询周期性缴费数据(包含退款)   占用status字段存放  交割表中的business_type 字段信息 -->
  <select id="getPushDataFroFinece" parameterType="java.util.Map" resultMap="BaseResultMap">
			SELECT
				(CASE when t2.house_code is null then t2.building_code else t2.house_code end ) buildingCode,
			  wy_amount,
			  bt_amount,
			  water_amount,
			  elect_amount,
			  common_amount,
			  DATE_FORMAT(t1.create_time,'%Y-%m-%d') createTime,
			  wy_tax,
			  bt_tax,
			  water_tax,
			  elect_tax,
			  t1.status,
			  t1.pay_type
			FROM
			  t_bs_pay_info t1,
				tc_building t2
				WHERE t1.building_code = t2.building_code
				AND t1.status in (0,1)
			    AND t1.project_id =  #{projectId}
				AND relation_id in (
					SELECT
				id
			FROM
				t_jg_account_receivable
			WHERE
				total_id IN (
					SELECT
						id
					FROM
						t_jg_total_calculation
					WHERE
						total_id IN (
							SELECT
								id
							FROM
								t_jg_total_calculation
							WHERE
								total_id IN (
									SELECT
										id
									FROM
										t_jg_total_calculation
									WHERE
										receive_id IN (
											SELECT
												user_id
											FROM
												t_jg_staff_grop
											WHERE
												project_id = #{projectId}
											AND role_level = 1
										)
									AND STATUS = 3
									AND project_id = #{projectId}
								)
							AND STATUS = 3
							AND project_id = #{projectId}
						) AND business_type in (1,4)
				)
			) 
			<if test=" null != lastPushDate and '' != lastPushDate ">
				<![CDATA[
					AND t1.create_time > #{lastPushDate} 
				]]>
			</if>
			<if test=" null != intervalDays and '' != intervalDays ">
				<![CDATA[
					AND t1.create_time < #{intervalDays} 
				]]>
			</if>
			AND t2.house_code IS NOT NULL
		 
  </select>


	<select id="getSumDataFroFinece" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
		sum(t1.wy_amount) as wyAmount,
		sum(t1.bt_amount) as btAmount,
		sum(t1.water_amount) as waterAmount,
		sum(t1.elect_amount) as electAmount,
		sum(t1.common_amount) as commonAmount
		FROM
		t_bs_pay_info t1,
		tc_building t2
		WHERE t1.building_code = t2.building_code
		AND t1.status in (0,1)
		AND t1.project_id =  #{projectId}
		AND relation_id in (
		SELECT
		id
		FROM
		t_jg_account_receivable
		WHERE
		total_id IN (
		SELECT
		id
		FROM
		t_jg_total_calculation
		WHERE
		total_id IN (
		SELECT
		id
		FROM
		t_jg_total_calculation
		WHERE
		total_id IN (
		SELECT
		id
		FROM
		t_jg_total_calculation
		WHERE
		receive_id IN (
		SELECT
		user_id
		FROM
		t_jg_staff_grop
		WHERE
		project_id = #{projectId}
		AND role_level = 1
		)
		AND STATUS = 3
		AND project_id = #{projectId}
		)
		AND STATUS = 3
		AND project_id = #{projectId}
		) AND business_type in (1,4)
		)
		)
		<if test=" null != lastPushDate and '' != lastPushDate ">
			<![CDATA[
					AND t1.create_time > #{lastPushDate}
				]]>
		</if>
		<if test=" null != intervalDays and '' != intervalDays ">
			<![CDATA[
					AND t1.create_time < #{intervalDays}
				]]>
		</if>
		AND t2.house_code IS NOT NULL

	</select>


  <!-- 托收数据 -->
  <select id="getPushCollectDataToFinece" parameterType="java.util.Map" resultMap="BaseResultMap">
	  SELECT
	  (CASE when t2.house_code is null then t2.building_code else t2.house_code end ) buildingCode,
	  wy_amount,
	  bt_amount,
	  water_amount,
	  elect_amount,
	  DATE_FORMAT(t1.create_time,'%Y-%m-%d') createTime,
	  wy_tax,
	  bt_tax,
	  water_tax,
	  elect_tax,
	  t1.status,
	  t1.pay_type
	  FROM
	  t_bs_pay_info t1,
	  tc_building t2
	  WHERE t1.building_code = t2.building_code
	  AND t1.project_id = #{projectId}
	  AND t1.pay_type = 5
	  <if test=" null != lastPushDate and '' != lastPushDate ">
		  <![CDATA[
						AND t1.create_time > #{lastPushDate}
					]]>
	  </if>
	  <if test=" null != intervalDays and '' != intervalDays ">
		  <![CDATA[
						AND t1.create_time < #{intervalDays}
					]]>
	  </if>
  </select>


	<select id="getSumCollectFroFinece" parameterType="java.util.Map" resultType="java.util.Map">

		SELECT
         sum(t1.wy_amount) as wyAmount,
		 sum(t1.bt_amount) as btAmount,
		 sum(t1.water_amount) as waterAmount,
		 sum(t1.elect_amount) as electAmount
		FROM
		t_bs_pay_info t1,
		tc_building t2
		WHERE t1.building_code = t2.building_code
		AND t1.project_id = #{projectId}
		AND t1.pay_type = 5
		<if test=" null != lastPushDate and '' != lastPushDate ">
			<![CDATA[
						AND t1.create_time > #{lastPushDate}
					]]>
		</if>
		<if test=" null != intervalDays and '' != intervalDays ">
			<![CDATA[
						AND t1.create_time < #{intervalDays}
					]]>
		</if>
	</select>





	<select id="listPageHistory4Building" parameterType="TBsPayInfo" resultMap="hasAnnexRsltMap">
  	    SELECT
			  t1.id,
			  t1.project_id,
			  t1.building_code,
			  t1.building_full_name,
			  t1.pay_type,
			  t1.status,
			  t1.asset_no,
			  t1.cust_name,
			  IFNULL(t1.wy_amount,0) AS wy_amount,
			  IFNULL(t1.bt_amount,0) AS bt_amount,
			  IFNULL(t1.water_amount,0) AS water_amount,
			  IFNULL(t1.elect_amount,0) AS elect_amount,
			  IFNULL(t1.common_amount,0) AS common_amount,
			  t1.jm_amount,
			  t1.jm_remark,
			  t1.wy_tax,
			  t1.bt_tax,
			  t1.water_tax,
			  t1.elect_tax,
			  t1.pay_cash,
			  t1.pay_wx,
			  t1.pay_union,
			  t1.pay_zfb,
			  t1.pay_coll,
			  t1.pay_bank,
			  t1.create_time,
			  t1.create_id,
			  t1.modify_time,
			  t2.staff_name AS modify_id,
			  t1.payer_name,
			  t1.is_give_invoice,
			  t1.batch_no,
			  t1.relation_id
		 FROM t_bs_pay_info t1
		 LEFT JOIN t_sys_user t2 ON t1.modify_id = t2.user_id
		WHERE 1 = 1
  	     <if test="null != buildingCode">
  	     	and t1.building_code = #{buildingCode}
  	     </if>
  	     <if test="null == buildingCode">
  	     	and t1.building_code = ''
  	     </if>
  	     <if test="null != payType">
  	     	and t1.pay_type = #{payType}
  	     </if>
  	     <if test="null != status">
  	     	and t1.status = #{status}
  	     </if>
  	     <if test="null != startTime">
  	     	<![CDATA[
  	     		and t1.create_time >= #{startTime}
  	     	]]>
  	     </if>
  	     <if test="null != endTime">
  	     	<![CDATA[
  	     		and t1.create_time <= #{endTime}
  	     	]]>
  	     </if>
  	     <if test="null != batchNo">
  	     	and batch_no like CONCAT('%',#{batchNo},'%')
  	     </if>
  	    order by t1.create_time desc, t1.batch_no desc
  </select>
  
  <select id="listPageHistory4Cust" parameterType="TBsPayInfo" resultMap="hasAnnexRsltMap">
	  	SELECT
				  t1.id,
				  t1.project_id,
				  t1.building_code,
				  t1.building_full_name,
				  t1.pay_type,
				  t1.status,
				  t1.asset_no,
				  t1.cust_name,
				  IFNULL(t1.wy_amount,0) AS wy_amount,
				  IFNULL(t1.bt_amount,0) AS bt_amount,
				  IFNULL(t1.water_amount,0) AS water_amount,
				  IFNULL(t1.elect_amount,0) AS elect_amount,
				  IFNULL(t1.common_amount,0) AS common_amount,
				  t1.jm_amount,
				  t1.jm_remark,
				  t1.wy_tax,
				  t1.bt_tax,
				  t1.water_tax,
				  t1.elect_tax,
				  t1.pay_cash,
				  t1.pay_wx,
				  t1.pay_union,
				  t1.pay_zfb,
				  t1.pay_coll,
				  t1.pay_bank,
				  t1.create_time,
				  t1.create_id,
				  t1.modify_time,
				  t2.staff_name AS modify_id,
				  t1.payer_name,
				  t1.is_give_invoice,
				  t1.batch_no,
				  t1.relation_id
			 FROM t_bs_pay_info t1
			 LEFT JOIN t_sys_user t2 ON t1.modify_id = t2.user_id
			WHERE 1 = 1
	  	     <if test="null != custId">
	  	     	and t1.building_code in (
	  	     		select t4.building_code 
	  	     		  from tc_person_building t3 ,
	  	     		       tc_building t4
	  	     		where t3.building_id = t4.id
	  	     		<if test='"person" ==  custType '>
	  	     			and	t3.cust_id = #{custId} and t3.enterprise_id is null
	  	     		</if>
	  	     		<if test='"enterprise" ==  custType '>
	  	     			and t3.enterprise_id = #{custId} and t3.cust_id is null
	  	     		</if>
	  	     		and t4.project_id in (SELECT project_id FROM t_jg_staff_grop WHERE user_id = #{createId} and role_level in (3,4) GROUP BY project_id)
	  	     		group by t4.building_code
	  	     	)
	  	     </if>
	  	     <if test="null != payType">
	  	     	and t1.pay_type = #{payType}
	  	     </if>
	  	     <if test="null != status">
	  	     	and t1.status = #{status}
	  	     </if>
	  	     <if test="null != startTime">
	  	     	<![CDATA[
	  	     		and t1.create_time >= #{startTime}
	  	     	]]>
	  	     </if>
	  	     <if test="null != endTime">
	  	     	<![CDATA[
	  	     		and t1.create_time <= #{endTime}
	  	     	]]>
	  	     </if>
	  	     <if test="null != batchNo">
	  	     	and batch_no like CONCAT('%',#{batchNo},'%')
	  	     </if>
	  	    order by t1.create_time desc, t1.batch_no desc
  </select>
  
  <!-- 获取违约金 -->
  <select id="findLateFee" resultType="DOUBLE">
  	   SELECT IFNULL(SUM(t1.total_late_fee),0) AS late_fee 
		FROM t_bs_owed_history t1, t_bs_asset_account t2
	   WHERE t1.account_id = t2.id
		 AND t2.building_code = #{buildingCode}
		 AND t2.type = #{type}
		 AND t1.is_used = 0
  </select>
  
  <!-- 获取打印信息的房屋名称集合 -->
  <select id="findBuildingNames" parameterType="TBsPayInfo" resultType="java.lang.String">
  		SELECT
			DISTINCT t2.building_full_name
		FROM
			t_bs_asset_account t1,
			tc_building t2
		WHERE
			t1.building_code = t2.building_code
		AND t1.use_status = 0
		<if test="null != buildingCodes">
			AND t2.building_code IN 
			<foreach collection="buildingCodes" open="(" separator="," close=")" item="code">
				#{code}
			</foreach>
		</if>
		AND t2.project_id IN (
			SELECT
				project_id
			FROM
				t_jg_staff_grop
			WHERE
				user_id =  #{createId} 
			AND role_level IN (3, 4)
		)
		AND t2.is_charge_obj = "Yes"
		AND t2.building_code IN (
			SELECT
					t6.building_code
				FROM
				 <if test='"person" ==  custType '>
						tc_person_cust t5,
			   	 </if>
			   	 <if test='"enterprise" == custType'>
						tc_enterprise_cust t5,
			  	 </if>
				
				tc_person_building t6
			WHERE 1 = 1
			<if test='"person" ==  custType '>
				and	t5.cust_id = t6.cust_id
				AND t5.cust_id = #{custId}
				AND t6.cust_id IS NOT NULL
			</if>
			<if test='"enterprise" == custType'>
				and	t5.enterprise_id = t6.enterprise_id
				AND t5.enterprise_id = #{custId}
				AND t6.enterprise_id IS NOT NULL
			</if>
			
			
		)
  </select>
  
  
  <select id="findBuildingNames4Building" parameterType="TBsPayInfo" resultType="java.lang.String">
  		SELECT
			MAX(t2.building_full_name)
		FROM
			t_bs_asset_account t1,
			tc_building t2
		WHERE
			t1.building_code = t2.building_code
		AND t1.use_status = 0
		AND t1.building_code = #{buildingCode}
		AND t2.project_id IN (
			SELECT
				project_id
			FROM
				t_jg_staff_grop
			WHERE
				user_id =  #{createId} 
			AND role_level IN (3, 4)
		)
		AND t2.is_charge_obj = "Yes"
		AND t2.building_code IN (
			SELECT  t4.building_code 
			  FROM tc_person_cust t3 , tc_person_building t4 
			 WHERE t3.cust_id = t4.cust_id 
			   AND t4.enterprise_id IS NULL 
			   AND t4.building_code =  #{buildingCode}
	  UNION ALL
			SELECT  t6.building_code 
			  FROM tc_enterprise_cust t5, tc_person_building t6 
			 WHERE t5.enterprise_id = t6.enterprise_id 
			   AND t6.cust_id IS NULL 
			   AND t6.building_code =  #{buildingCode}
		)
  </select>
  
  <select id="findDatas" parameterType="TBsPayInfo" resultMap="BaseResultMap">
  		SELECT 
	  	        t1.id, 
				t1.project_id, 
				t2.house_code AS building_code, 
				t1.pay_type,
				t1.status,	
	      		t1.building_full_name, 
	      		t1.asset_no, cust_name, 
	      		IFNULL(t1.wy_amount, 0) AS wy_amount, 
	      		IFNULL(t1.bt_amount, 0) AS bt_amount, 
	      		IFNULL(t1.water_amount, 0) AS water_amount, 
	      		IFNULL(t1.elect_amount, 0) AS elect_amount, 
	      		IFNULL(t1.common_amount, 0) AS common_amount, 
	      		t1.jm_amount, 
	      		t1.jm_remark, 
	      		t1.wy_tax,
	      		t1.bt_tax,
	      		t1.water_tax,
	      		t1.elect_tax,
	      		t1.pay_cash,
	      		t1.pay_wx,
	      		t1.pay_union,
	      		t1.pay_zfb,
	      		t1.pay_coll,
	      		t1.pay_bank,
	      		t1.create_time, 
	      		t1.create_id, 
	      		t1.modify_time, 
	      		t1.modify_id,
	      		t1.payer_name,
	      		t1.is_give_invoice,
	      		t1.batch_no,
	      		t1.relation_id 
	  	  FROM  t_bs_pay_info t1,
	  	        tc_building t2
	  	 WHERE 1 = 1
	  	   AND t1.building_code = t2.building_code
  	   <if test="null != createId">
	  	   and t1.create_id = #{createId}
  	   </if> 
  	   <if test="null != projectId">
  	   	   and t1.project_id = #{projectId}
  	   </if>
  	   <if test="null != startTime">
  	   	   <![CDATA[
  	   	   	  and t1.create_time > #{startTime}
  	   	   ]]>
  	   </if>
  	   <if test="null != endTime">
  	   	   <![CDATA[
  	   	   	  and t1.create_time < DATE_ADD(#{endTime}, INTERVAL 1 DAY)
  	   	   ]]>
  	   </if>
  	   <if test="null != status">
  	   		  and t1.status = #{status}
  	   </if>
	 ORDER BY t1.create_time asc
  </select>
  
  <!-- 根据月份导出计费流水 -->
	<select id="findBillingsDataByObj" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		SELECT 
			tt.house_code as building_code,
			tt.building_full_name,
			tt.wy_amount,
			tt.wy_late_fee,
			tt.bt_amount,
			tt.bt_late_fee,
			tt.water_amount,
			tt.water_late_fee,
			tt.elect_amount,
			tt.elect_late_fee,
			cast(
					(
						tt.wy_amount + tt.wy_late_fee 
					  + tt.bt_amount + tt.bt_late_fee
					  + tt.water_amount + tt.water_late_fee
					  + tt.elect_amount + tt.elect_late_fee
					) 
						as decimal(15,2)
				) as common_amount
			FROM 
			(
			 
				 SELECT  t.house_code,
				      t.building_full_name,
					  SUM(IF(t.type = 1, IFNULL(t.current_fee,0),0)) AS wy_amount,
					  SUM(IF(t.type = 2, IFNULL(t.current_fee,0),0)) AS bt_amount,
					  SUM(IF(t.type = 3, IFNULL(t.current_fee,0),0)) AS water_amount,
					  SUM(IF(t.type = 4, IFNULL(t.current_fee,0),0)) AS elect_amount,
					  SUM(IF(t.type = 1, IFNULL(t.total_late_fee,0),0)) AS wy_late_fee,
					  SUM(IF(t.type = 2, IFNULL(t.total_late_fee,0),0)) AS bt_late_fee,
					  SUM(IF(t.type = 3, IFNULL(t.total_late_fee,0),0)) AS water_late_fee,
					  SUM(IF(t.type = 4, IFNULL(t.total_late_fee,0),0)) AS elect_late_fee
				  FROM (
						  SELECT t5.house_code, t5.building_full_name,(t1.current_fee + t1.share_fee) as current_fee,t2.type,
							SUM(t4.total_late_fee) AS total_late_fee
						   FROM t_bs_charge_bill_history t1
						   LEFT JOIN tc_building t5 ON t1.building_code = t5.building_code
						   LEFT JOIN t_bs_charge_bill_total t2 ON t1.charge_total_id = t2.id
						   LEFT JOIN t_bs_asset_account tt ON t1.building_code = tt.building_code AND t2.type = tt.type
						   LEFT JOIN t_bs_owed_history t4 ON t4.account_id = tt.id AND t4.is_used = 0 
						  WHERE t2.project_id = #{projectId}
						    AND DATE_FORMAT(t1.billing_time,'%Y-%m') = DATE_FORMAT(#{createTime},"%Y-%m")
						    AND t2.billing_time IS NOT NULL 
						    AND t5.house_code IS NOT NULL
						    and t5.house_code != ""
						    AND t1.is_used = 0
						   GROUP BY t5.house_code,t2.type
				  	) t
			  	 GROUP BY t.house_code
			) tt
	</select>
	
	<select id="findAccountDatasByObj" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		SELECT 
			tt.house_code AS building_code,
			(CASE tt.building_type WHEN 'house' THEN '住宅' WHEN 'store' THEN '商业' WHEN 'spacepark' THEN '车位' WHEN 'disanfangzichan' THEN '第三方资产' WHEN 'gonggongchangdichuzu' THEN '管理处资产'  WHEN 'gongchengshigong' THEN '工程施工' END) as building_type,
			tt.wy_amount,
			tt.wy_late_fee,
			tt.bt_amount,
			tt.bt_late_fee,
			tt.water_amount,
			tt.water_late_fee,
			tt.elect_amount,
			tt.elect_late_fee,
			tt.common_amount
			FROM 
			(
			 
				 SELECT  t.house_code,
				 		  t.building_type,
					  SUM(IF(t.type = 1, IFNULL(t.account_balance,0),0)) AS wy_amount,
					  SUM(IF(t.type = 2, IFNULL(t.account_balance,0),0)) AS bt_amount,
					  SUM(IF(t.type = 3, IFNULL(t.account_balance,0),0)) AS water_amount,
					  SUM(IF(t.type = 4, IFNULL(t.account_balance,0),0)) AS elect_amount,
					  SUM(IF(t.type = 0, IFNULL(t.account_balance,0),0)) AS common_amount,
					  SUM(IF(t.type = 1, IFNULL(t.total_late_fee,0),0)) AS wy_late_fee,
					  SUM(IF(t.type = 2, IFNULL(t.total_late_fee,0),0)) AS bt_late_fee,
					  SUM(IF(t.type = 3, IFNULL(t.total_late_fee,0),0)) AS water_late_fee,
					  SUM(IF(t.type = 4, IFNULL(t.total_late_fee,0),0)) AS elect_late_fee
				  FROM (
						  SELECT t2.house_code,t2.building_type, t1.account_balance,t1.type,
							SUM(t3.total_late_fee) AS total_late_fee
						   FROM  t_bs_asset_account t1
						   LEFT JOIN tc_building t2 ON t1.building_code = t2.building_code
						   LEFT JOIN t_bs_owed_history t3 ON t3.account_id = t1.id AND t3.is_used = 0
						  WHERE t2.project_id = #{projectId}
						    AND t2.house_code IS NOT NULL
						    AND t2.house_code != ""
						  GROUP BY t2.house_code,t1.type
				  	) t
			  	 GROUP BY t.house_code
			) tt
	</select>
	
	<select id="findExportPayInfoDatasByObj" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		   SELECT
				  t3.house_code as building_code,
				  t1.pay_type,
				  t1.status,
				  t1.payer_name,
				  IFNULL(t1.wy_amount,0) AS wy_amount,
				  IFNULL(t1.bt_amount,0) AS bt_amount,
				  IFNULL(t1.water_amount,0) AS water_amount,
				  IFNULL(t1.elect_amount,0) AS elect_amount,
				  IFNULL(t1.common_amount,0) AS common_amount,
				  ifnull(t1.wy_late_fee,0) as wy_late_fee,
				  ifnull(t1.bt_late_fee,0) as bt_late_fee,
				  ifnull(t1.water_late_fee,0) as water_late_fee,
				  ifnull(t1.elect_late_fee,0) as elect_late_fee,
				  cast(
				  			(IFNULL(t1.wy_amount,0) + IFNULL(t1.bt_amount,0) + IFNULL(t1.water_amount,0) + IFNULL(t1.elect_amount,0) + IFNULL(t1.common_amount,0)) 
				  				as decimal(15,2)
				  	  ) as pay_cash,
				  cast(
				  			(ifnull(t1.wy_late_fee,0) + ifnull(t1.bt_late_fee,0) + ifnull(t1.water_late_fee,0) + ifnull(t1.elect_late_fee,0)) 
				  				as decimal(15,2)
				  	  ) as total_late_fee,
				  t1.jm_remark,
				  t1.create_time,
				  t2.staff_name AS create_id,
				  t1.batch_no
			 FROM t_bs_pay_info t1
			 LEFT JOIN t_sys_user t2 ON t1.modify_id = t2.user_id
			 left join tc_building t3 on t1.building_code = t3.building_code
			 where 1 = 1
			 <if test="null != createId">
			 	and t1.create_id = #{createId}
			 </if>
			 <if test="null != startTime">
			 	<![CDATA[ and t1.create_time >= date_format(#{startTime}, '%Y-%m-%d')]]>
			 </if>
			 <if test="null != endTime">
			 	<![CDATA[ and t1.create_time < date_format(DATE_ADD(#{endTime}, INTERVAL 1 DAY), '%Y-%m-%d')]]>
			 </if>
			 <if test="null != projectId">
				and t1.project_id = #{projectId}
			 </if>
			 order by t1.create_time desc 
	</select>
	
	<!-- 获取时间段类所有收费总和 -->
	<select id="findTotalDatasByObj" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		SELECT 
		     t.status,
			 SUM(IF(t.pay_type = 1, IFNULL(t.amount,0),0)) AS pay_cash,
			 SUM(IF(t.pay_type = 2, IFNULL(t.amount,0),0)) AS pay_wx,
			 SUM(IF(t.pay_type = 3, IFNULL(t.amount,0),0)) AS pay_union,
			 SUM(IF(t.pay_type = 4, IFNULL(t.amount,0),0)) AS jm_amount,
			 SUM(IF(t.pay_type = 5, IFNULL(t.amount,0),0)) AS pay_coll,
			 SUM(IF(t.pay_type = 6, IFNULL(t.amount,0),0)) AS pay_bank,
			 SUM(IF(t.pay_type = 7, IFNULL(t.amount,0),0)) AS pay_zfb,
			SUM(IF(t.pay_type = 8, IFNULL(t.amount,0),0)) AS wxXiao,
			 CAST(SUM(t.amount) AS DECIMAL(15,2)) AS wy_tax
		FROM (
			SELECT t1.pay_type,
				   <if test="payType == 0"> SUM(common_amount)</if>
				   <if test="payType == 1"> SUM(wy_amount) </if>
				   <if test="payType == 2"> SUM(bt_amount) </if>
				   <if test="payType == 3"> SUM(water_amount) </if>
				   <if test="payType == 4"> SUM(elect_amount) </if>
			       			AS amount,
			       	#{payType} as `status` 
			FROM t_bs_pay_info t1
			WHERE 1 = 1
			  and t1.status = 0
			 <if test="null != startTime">
			 	<![CDATA[ and t1.create_time >= date_format(#{startTime}, '%Y-%m-%d')]]>
			 </if>
			 <if test="null != endTime">
			 	<![CDATA[ and t1.create_time < date_format(DATE_ADD(#{endTime}, INTERVAL 1 DAY), '%Y-%m-%d')]]>
			 </if>
			 <if test="null != projectId">
				and t1.project_id = #{projectId}
			 </if>
			GROUP BY t1.pay_type
		) t
	</select>
	

	<select id="findTotalDatasForRefund" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		SELECT
		     t.status,
			 SUM(IF(t.pay_type = 1, IFNULL(t.amount,0),0)) AS pay_cash
<!-- 			 SUM(IF(t.pay_type = 2, IFNULL(t.amount,0),0)) AS pay_wx, -->
<!-- 			 SUM(IF(t.pay_type = 3, IFNULL(t.amount,0),0)) AS pay_union, -->
<!-- 			 SUM(IF(t.pay_type = 4, IFNULL(t.amount,0),0)) AS jm_amount, -->
<!-- 			 SUM(IF(t.pay_type = 5, IFNULL(t.amount,0),0)) AS pay_coll, -->
<!-- 			 SUM(IF(t.pay_type = 6, IFNULL(t.amount,0),0)) AS pay_bank, -->
<!-- 			 SUM(IF(t.pay_type = 7, IFNULL(t.amount,0),0)) AS pay_zfb, -->
<!-- 			 CAST(SUM(t.amount) AS DECIMAL(15,2)) AS wy_tax -->
		FROM (
			SELECT t1.pay_type,
				   <if test="payType == 0"> SUM(common_amount)</if>
				   <if test="payType == 1"> SUM(wy_amount) </if>
				   <if test="payType == 2"> SUM(bt_amount) </if>
				   <if test="payType == 3"> SUM(water_amount) </if>
				   <if test="payType == 4"> SUM(elect_amount) </if>
			       			AS amount,
			       	#{payType} as `status`
			FROM t_bs_pay_info t1
			WHERE 1 = 1
			  and t1.status = 1
			 <if test="null != startTime">
			 	<![CDATA[ and t1.create_time >= date_format(#{startTime}, '%Y-%m-%d')]]>
			 </if>
			 <if test="null != endTime">
			 	<![CDATA[ and t1.create_time < date_format(DATE_ADD(#{endTime}, INTERVAL 1 DAY), '%Y-%m-%d')]]>
			 </if>
			 <if test="null != projectId">
				and t1.project_id = #{projectId}
			 </if>
			GROUP BY t1.pay_type
		) t
	</select>



	<select id="findToBatchNo" parameterType="TBsPayInfo" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_bs_pay_info
		where batch_no = #{batchNo,jdbcType=VARCHAR}
	</select>

	<select id="findToTimeAndBuildingCode"  resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_bs_pay_info
		where  building_code=#{buildingCode,jdbcType=VARCHAR}
		and create_time>#{createTime}
		and status=1
	</select>
	<select id="findToBuilidngCodePayMoneyAndBackAndJm" resultType="java.util.Map">
		select bcode,
		IFNULL(SUM((case when status = 0 then wypay end)),0.0) wypayN,
		IFNULL(SUM((case when status = 0 then btpay end)),0.0) btpayN,
		IFNULL(SUM((case when status = 0 then waterpay end)),0.0) waterpayN,
		IFNULL(SUM((case when status = 0 then electpay end)),0.0) electpayN,
		IFNULL(SUM((case when status = 0 then commonpay end)),0.0) commonpayN,

		IFNULL(SUM((case when status = 1 then wypay end)),0.0) wypayBack,
		IFNULL(SUM((case when status = 1 then btpay end)),0.0) btpayBack,
		IFNULL(SUM((case when status = 1 then waterpay end)),0.0) waterpayBack,
		IFNULL(SUM((case when status = 1 then electpay end)),0.0) electpayBack,
		IFNULL(SUM((case when status = 1 then commonpay end)),0.0) commonpayBack,

		IFNULL(SUM((case when status = 2 then wypay end)),0.0) wypayJM,
		IFNULL(SUM((case when status = 2 then btpay end)),0.0) btpayJM,
		IFNULL(SUM((case when status = 2 then waterpay end)),0.0) waterpayJM,
		IFNULL(SUM((case when status = 2 then electpay end)),0.0) electpayJM

		 from
		(
		select
		MAX(building_code) bcode,status ,MAX(project_id) projectid,SUM(IFNULL(wy_amount,0.0)) wypay ,SUM(IFNULL(bt_amount,0.0)) btpay,SUM(IFNULL(water_amount,0.0)) waterpay,
		SUM(IFNULL(elect_amount,0.0)) electpay,SUM(IFNULL(common_amount,0.0)) commonpay
		 from t_bs_pay_info where building_code = #{buildingCode}
		group by status) tt group by bcode
	</select>

	<select id="finfListTBsPayInfo"   parameterType="String"  resultType="com.everwing.coreservice.common.wy.entity.account.pay.TBsPayInfoDto">
			select buildingCode,
		IFNULL(SUM((case when status = 0 then wypay end)),0.0) wypayN,
IFNULL(SUM((case when status = 1 then wypay end)),0.0) wypayBack,
IFNULL(SUM((case when status = 2 then wypay end)),0.0) wypayJM,
		IFNULL(SUM((case when status = 0 then btpay end)),0.0) btpayN,
IFNULL(SUM((case when status = 1 then btpay end)),0.0) btpayBack,
IFNULL(SUM((case when status = 2 then btpay end)),0.0) btpayJM,
		IFNULL(SUM((case when status = 0 then waterpay end)),0.0) waterpayN,
IFNULL(SUM((case when status = 1 then waterpay end)),0.0) waterpayBack,
IFNULL(SUM((case when status = 2 then waterpay end)),0.0) waterpayJM,
		IFNULL(SUM((case when status = 0 then electpay end)),0.0) electpayN,
IFNULL(SUM((case when status = 1 then electpay end)),0.0) electpayBack,
	IFNULL(SUM((case when status = 2 then electpay end)),0.0) electpayJM,
		IFNULL(SUM((case when status = 0 then commonpay end)),0.0) commonpayN,
	IFNULL(SUM((case when status = 1 then commonpay end)),0.0) commonpayBack
 from
		(
		select
		MAX(building_code) buildingCode,status ,MAX(project_id) projectid,SUM(IFNULL(wy_amount,0.0)) wypay ,SUM(IFNULL(bt_amount,0.0)) btpay,SUM(IFNULL(water_amount,0.0)) waterpay,
		SUM(IFNULL(elect_amount,0.0)) electpay,SUM(IFNULL(common_amount,0.0)) commonpay
		 from t_bs_pay_info
		 where project_id=#{projectId}
		group by status,building_code
) tt group by buildingCode
	</select>

	<!-- 获取微信小程序金 -->
	<select id="findWXAppletsMoney"  parameterType="TBsPayInfo" resultType="DOUBLE">
		select IFNULL( SUM(pay_wx),0.0)
		from t_bs_pay_info
		where pay_type=8
		and status = 0
		<if test="null != startTime">
			<![CDATA[ and create_time >= date_format(#{startTime}, '%Y-%m-%d')]]>
		</if>
		<if test="null != endTime">
			<![CDATA[ and create_time < date_format(DATE_ADD(#{endTime}, INTERVAL 1 DAY), '%Y-%m-%d')]]>
		</if>
		<if test="null != projectId">
			and project_id = #{projectId}
		</if>
	</select>
</mapper>